# Project Configurations
#############################################################
# 0 - refers to Linux environment - exe
# 1 - refers to Target environment - elf

ENVIRONMENT=1

#############################################################
# STM32_DISCO_F769NI - refers to STM32F769NI discovery development board
# GEN1  - refers to Target hardware STM32F765NIH6 (Core Board)

BOARD=GEN1

#############################################################
# 0 - Disable GS Backdoor sock
# 1 - Enable GS Backdoor sock

ENABLE_BACKDOOR_SOCKET =1

##############################################################
#0 - Which enables USB/Ethernet via UDP with LibCSP
#1 - Which enables USB/Ethernet via TCP with LibCSP

# This is used to select UDP/TCP protocol to be used between GS and OBC while connected with
# Ethernet or USB. This should be UDP while connected to S-Band module.

GS_OBC_TCP=1

#############################################################
# 1  - print from UART 5 in Coreboard
# 0 -  Disable print in Coreboard

PRINT_ENB=0

#############################################################
# 0 - Watchdog timer disable
# 1 - Watchdog timer enable

WDT_ENB=1

#############################################################
# 0 -  which enables software flash through debugger/programmer
# 1 -  which enables software boot by Bootloader/OTSU

BOOTLOADER=0

#############################################################
#0 - Which enables GS via Ethernet;
#1 - Which enables GS via USB; OBC support via PS;

# When CAN_BYPASS_SOCK_ENB=0,This will not impact any common functionality 
# When CAN_BYPASS_SOCK_ENB= , this decides which IP (USB/Ethernet) to be listern
# Default to all USB, as we must need to support via USB for PS TC TM Interface
GS_OBC_VIA_USB=0
#############################################################

# 1 - Heat sink will not be turned on
# 0 - Heat sink will be turned on based on the nvm settings

HEAT_SINK_DISABLE=0
#############################################################
# 0 - Disable scanf function provision in Linux environment
# 1 - Enable scanf function provision in Linux environment

SCANF_ENB =1
#############################################################
# 0 - Enables O2 optimization
# 1 - Disbales O2 optimzation

IGNORE_OPT =0
#############################################################
# 1 - Enable UHF Bypass
# 0 - Enable UHF hardware in linux via UART

UHF_HW_BYPASS =0
#############################################################
# 0 - Disable ethernet speed to 10MHz
# 1 - Enable ethernet speed to 10MHz

ETH_10MHZ_EN=0
#############################################################

# Clear All previous CFLAGS settings
CFLAGS :=

# Decide whether the commands will be shwon or not
#VERBOSE =TRUE
VERBOSE =FALSE

# Hide or not the calls depending of VERBOSE
ifeq ($(VERBOSE),TRUE)
    HIDE =  
    MAKE_FLAGS = -k
else
    HIDE = @
    MAKE_FLAGS = --no-print-directory --silent
endif

# Enable O2
ifneq ($(IGNORE_OPT),1)
OPT = -O2
endif

PROJ_NAME = antaris_exo_core
TARGET = bin/antaris_exo_core

MKDIR = mkdir -p
RM    = rm -rf
RMDIR = rm -rf

ifeq ($(ENVIRONMENT),1)

# Target file name and extension type
EXT = elf

CC      = arm-none-eabi-gcc
AR      = arm-none-eabi-ar
OC      = arm-none-eabi-objcopy
OD      = arm-none-eabi-objdump
SIZE    = arm-none-eabi-size
LD      = arm-none-eabi-ld

# TBD: Toolchain path selection to be done
#TC_PATH = /opt/gcc-arm-none-eabi-10.3-2021.10/
#    CC   = $(TC_PATH)/bin/arm-none-eabi-gcc
#    LD   = $(TC_PATH)/bin/arm-none-eabi-ld
#    AR   = $(TC_PATH)/bin/arm-none-eabi-ar
#    OC   = $(TC_PATH)/bin/arm-none-eabi-objcopy
#    OD   = $(TC_PATH)/bin/arm-none-eabi-objdump
#    SIZE = $(TC_PATH)/bin/arm-none-eabi-size

# Processor information is updated here
CPU = -mcpu=cortex-m7

# Processor related compilation flags are updated here
MCU = $(CPU) -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb

ifeq ($(WDT_ENB),1)
    CFLAGS += -DWDT_ENABLE
endif

ifeq ($(HEAT_SINK_DISABLE),1)
	CFLAGS += -DHEAT_SINK_DISABLE 
endif

ifeq ($(BOOTLOADER),1)
    CFLAGS += -DBTLR_ON
endif

ifeq ($(GS_OBC_VIA_USB),1)
	CFLAGS += -DGSOBC_USB_EN
endif

ifeq ($(BOARD),STM32_DISCO_F769NI)
	CFLAGS += -DCOMMS_UART6_ENB
endif
ifeq ($(ETH_10MHZ_EN),1)
    CFLAGS += -DETH_10MHZ_EN 
endif

ifeq ($(ENVIRONMENT),1)
	CFLAGS += -DUSB_IP_ADDR0=190
	CFLAGS += -DUSB_IP_ADDR1=160
	CFLAGS += -DUSB_IP_ADDR2=0
	CFLAGS += -DUSB_IP_ADDR3=10
	
	CFLAGS += -DETH_IP_ADDR0=192
	CFLAGS += -DETH_IP_ADDR1=168
	CFLAGS += -DETH_IP_ADDR2=1
	CFLAGS += -DETH_IP_ADDR3=111

	CFLAGS += -DETH_MAC_ADDR0=0x00
	CFLAGS += -DETH_MAC_ADDR1=0x80
	CFLAGS += -DETH_MAC_ADDR2=0xE1
	CFLAGS += -DETH_MAC_ADDR3=0x00
	CFLAGS += -DETH_MAC_ADDR4=0x00
	CFLAGS += -DETH_MAC_ADDR5=0x00
	
	CFLAGS += -DUSB_MAC_ADDR0=0x00U
	CFLAGS += -DUSB_MAC_ADDR1=0x02U
	CFLAGS += -DUSB_MAC_ADDR2=0x02U
	CFLAGS += -DUSB_MAC_ADDR3=0x03U
	CFLAGS += -DUSB_MAC_ADDR4=0x00U
	CFLAGS += -DUSB_MAC_ADDR5=0x00U

	CFLAGS += -DGS_SRVR_PORT=6767
endif


ifeq ($(BOARD),STM32_DISCO_F769NI)
    #Additional compilation flags that could be enabled
    CFLAGS += -g3 $(OPT) -Wall $(MCU) -DDEBUG -DUSE_HAL_DRIVER -DSTM32F769xx \
             -DCMSIS_RTOS_V2 -DFT_OBC -DFT_SAT -I$(TOP_DIR)/includes -I$(TOP_DIR) -DCSP_FREERTOS=1 \
            -Wno-implicit-function-declaration

else ifeq ($(BOARD),GEN1)

    CFLAGS += -g3 $(OPT) -Wall $(MCU) -DDEBUG -DUSE_HAL_DRIVER -DSTM32F765xx -DCOREBOARD \
    	 -DCMSIS_RTOS_V2 -DFT_OBC -DFT_SAT -I$(TOP_DIR)/includes -I$(TOP_DIR) -DCSP_FREERTOS=1 \
            -Wno-implicit-function-declaration

    ifeq ($(PRINT_ENB),1)
        CFLAGS += -DPRINT_UART_5
    endif
endif

# Linker file path and file name is updated here
ifeq ($(BOOTLOADER),0)
    LDSCRIPT = linker/linker.ld
endif

# Libraries to be linked are updated here
LIBS = -lc -lm

ifneq ($(SINGLE_MAKE),1)
    LIBS += -lipcc_lib -lcrc -lhmac -lmbedcrypto
endif

# Linker related flags are upated here
LDFLAGS = $(MCU) -specs=nano.specs -specs=nosys.specs -T$(LDSCRIPT) -Wl,-Map=$(TARGET).$(EXT).map,--cref -Wl,--gc-sections \
	  -L exo_lib/exo_ipcc/\
	  -L exo_lib/security/libcrc-2.0/obj/\
	  -L exo_lib/security/hmac/obj/\
	  -L exo_lib/security/mbedtls/library/obj/\

else
ifeq ($(UHF_HW_BYPASS),1)
    CFLAGS += -DUHF_HW_BYPASS
endif

# Target file name and extension type
EXT = exe

# Toolchain path
AR   = ar
CC   = gcc
OC   = objcopy
OD   = objdump
SIZE = size
LD   = ld

# Additional compilation flags that could be enabled
CFLAGS += -g3 $(OPT) -lpthread -ljansson -Wall -DDEBUG -DLINUX_TEMP_PORT -DFT_OBC -DFT_SAT -I$(TOP_DIR)/includes -I$(TOP_DIR) -DCSP_POSIX=1 -std=gnu99

ifeq ($(SCANF_ENB),1)
    CFLAGS += -DSCANF_ENB
endif

# Libraries to be linked are updated here
LDFLAGS = -L exo_lib/exo_ipcc/\
	  -L exo_lib/security/libcrc-2.0/obj/\
	  -L exo_lib/security/hmac/obj/\
	  -L exo_lib/security/mbedtls/library/obj/

LIBS = -lc -lm -ljansson

ifneq ($(SINGLE_MAKE),1)
    LIBS += -lipcc_lib -lcrc -lhmac -lmbedcrypto
endif

endif
ifeq ($(ENABLE_BACKDOOR_SOCKET),1)
    CFLAGS += -DBACKDOOR_SOCK_ENB
endif

ifeq ($(GS_OBC_TCP),1)
    CFLAGS += -DGSOBC_TCP_EN
else
    CFLAGS += -UGSOBC_TCP_EN
endif


MAKE = make -k $(MAKE_FLAGS)

#MAKE += -j4

OBJ_DIR := obj

$(OBJ_DIR)/%.o : %.s
	echo Building $@
	$(HIDE)$(MKDIR) $(dir $@)
	$(HIDE)$(CC) $(CFLAGS) -c $(INCLUDES) -o $@ $< -MMD
	$(HIDE)$(MKDIR) $(TOP_DIR)/$(OBJ_DIR)
	$(HIDE)$(OC) $@ $(TOP_DIR)/$(OBJ_DIR)/$(notdir $@)

$(OBJ_DIR)/%.o : %.c
	echo Building $@
	$(HIDE)$(MKDIR) $(dir $@)
	$(HIDE)$(CC) $(CFLAGS) -c $(INCLUDES) -o $@ $< -MMD
	$(HIDE)$(MKDIR) $(TOP_DIR)/$(OBJ_DIR)
	$(HIDE)$(OC) $@ $(TOP_DIR)/$(OBJ_DIR)/$(notdir $@)

